[Log for all Calls]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -1d@d
dispatch.latest_time = @d
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.show = 0
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:call_report" \
| eval call_start_time = strftime(strptime(call_start_time,"%Y-%m-%d %H:%M:%S"),"%m/%d/%Y %I:%M:%S %p%z")\
| eval hst = lower(host)\
| stats count by call_id, call_start_time ,seq_order, start_time, end_time, src_caller_number, src_display_name, dst_caller_number, dst_display_name, action\
| fields - count | sort -call_id, + seq_order\
| rename call_id as "Call ID", call_start_time as "Call Time"\
| stats list(seq_order) as Sequence, list(start_time) as "Start Time", list(end_time) as "End Time", list(src_caller_number) as "Source Number", list(src_display_name) as "Source Name", list(dst_caller_number) as "Dest. Number", list(dst_display_name) as "Dest. Name", list(action) as "Action" by "Call ID", "Call Time"\
| sort - "Call ID", + seq_order

[Agent Login Timeline]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -1d@d
dispatch.latest_time = @d
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = visualizations
display.page.search.mode = verbose
display.page.search.tab = visualizations
display.statistics.show = 0
display.visualizations.charting.chart = line
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.type = custom
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:agent_logins"\
| where ag_num!="1000" | eval Agent = ag_fname + " " + ag_lname | eval loginTime = strptime(logintime, "%Y-%m-%d %H:%M:%S%z") \
| eval logoutTime = strptime(logouttime, "%Y-%m-%d %H:%M:%S%z")\
| eval sTime = strptime(logintime,"%Y-%m-%d %H:%M:%S%z")\
| eval dur = secondsloggedin*1000\
| stats count by sTime, dur, Agent\
| table sTime Agent dur

[Data Not Being Received: Call Report]
action.lookup = 1
action.lookup.append = 1
action.lookup.filename = nodata_callreport.csv
alert.suppress = 0
alert.track = 0
alert_condition = search Result != "All good"
counttype = custom
cron_schedule = 0 7 * * 2-6
description = No data is being pulled form the SQL database
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:call_report" | stats count as results | eval n=strftime(relative_time(now(), "-1d"),"%b %d, %Y") | eval Result = if(results=0,"Call Report has no new data pulling in for "+n,"All good") | Table Result

[Data Not Being Received: Agent Logins]
action.lookup = 1
action.lookup.append = 1
action.lookup.filename = nodata_agentlogins.csv
alert.suppress = 0
alert.track = 0
alert_condition = search Result != "All good"
counttype = custom
cron_schedule = 0 7 * * 2-6
description = No data is being pulled from the SQL database
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:agent_logins" | stats count as results | eval n=strftime(relative_time(now(), "-1d"),"%b %d, %Y") | eval Result = if(results=0,"Agent Logins has no new data pulling in for "+n,"All good") | Table Result

[Data Not Being Received: Calls View]
action.lookup = 1
action.lookup.append = 1
action.lookup.filename = nodata_callsview.csv
alert.suppress = 0
alert.track = 0
alert_condition = search Result != "All good"
counttype = custom
cron_schedule = 0 7 * * 2-6
description = No data is being pulled from the SQL database
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:calls_view" | stats count as results | eval n=strftime(relative_time(now(), "-1d"),"%b %d, %Y") | eval Result = if(results=0,"Calls View has no new data pulling in for "+n,"All good") | Table Result

[Data Not Being Received: Queue Calls View]
action.lookup = 1
action.lookup.append = 1
action.lookup.filename = nodata_queuecallsview.csv
alert.suppress = 0
alert.track = 0
alert_condition = search Result != "All good"
counttype = custom
cron_schedule = 0 7 * * 2-6
description = No data is being pulled from the SQL database
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:queuecalls_view" | stats count as results | eval n=strftime(relative_time(now(), "-1d"),"%b %d, %Y") | eval Result = if(results=0,"Queue Calls View has no new data pulling in for "+n,"All good") | Table Result

[Data Not Being Received: Cl Party Info]
action.lookup = 1
action.lookup.append = 1
action.lookup.filename = nodata_clpartyinfo.csv
alert.suppress = 0
alert.track = 0
alert_condition = search Result != "All good"
counttype = custom
cron_schedule = 0 7 * * 2-6
description = No data is being pulled from the SQL database
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.type = custom
enableSched = 1
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:cl_party_info" | stats count as results | eval n=strftime(relative_time(now(), "-1d"),"%b %d, %Y") | eval Result = if(results=0,"Cl Party Info has no new data pulling in for "+n,"All good") | Table Result

[Top 10 Agents with Most Time Logged In]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.show = 0
display.visualizations.type = custom
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:agent_logins"\
| where ag_num!="1000"\
| eval secondsloggedin = secondsloggedin/3600 \
| eval Agent = ag_fname + " " + ag_lname\
| stats sum(secondsloggedin) as Time by Agent\
| eval Time=round(Time,2)\
| sort - Time\
| rename Time AS "Hours " | head 10

[Calls Volume per Queue]
action.email.useNSSubject = 1
alert.track = 0
description = Measures the distribution of queue calls across all queues
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = visualizations
display.page.search.mode = verbose
display.page.search.tab = visualizations
display.statistics.show = 0
display.visualizations.charting.chart = pie
display.visualizations.custom.type = timeline_app.timeline
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:queuecalls_view" \
| stats count as Calls by q_name \
| sort - Calls

[Calls Summary for each Agent]
action.email = 1
action.email.sendcsv = 1
action.email.sendresults = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 1 * * *
description = A report highlighting the performance of queue agents. SLA default is 30 seconds.
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.statistics.totalsRow = 1
display.visualizations.charting.chart = line
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.show = 0
display.visualizations.type = custom
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:queuecalls_view"\
| eval Agent = ag_fname + " " + ag_lname + " ("+to_dn+")"\
| eval Ab = if(isserviced!="1", 1, 0)\
| eval Ans = if(isserviced="1", 1, 0)\
| eval SlaP = if(tot_ringing_sec<=30,1,0)\
| stats count as Total, \
sum(Ab) as Abandoned, \
sum(Ans) as Answered,\
sum(tot_servicing_sec) as TotTalk,\
avg(tot_servicing_sec) as AvgTalk,\
sum(tot_ringing_sec) as TotRing,\
avg(tot_ringing_sec) as AvgRing,\
sum(SlaP) as SlaPc by Agent\
| eval TotC = [search `default_index` sourcetype="3cx:queuecalls_view" | stats count as TotalC | return $TotalC ]\
| eval PctOfSLA = round((SlaPc/Total)*100,2) . " %"\
| eval SvPct = round(Answered*100/Total,1) . " %"\
| eval TTalk = replace(tostring(TotTalk,"duration"),"\.(\d+)","")\
| eval TRing = replace(tostring(TotRing,"duration"),"\.(\d+)","")\
| eval ATalk = strftime(AvgTalk, "%Mm %Ss")\
| eval ARing = strftime(AvgRing, "%Mm %Ss")\
| table Agent, Total, Abandoned, Answered, SvPct, PctOfSLA, TRing, ARing, TTalk, ATalk\
| rename Total as "Total Calls", SvPct as "% of Calls Serviced", PctOfSLA as "SLA Met %", TRing AS "Ring Time Total", ARing as "Mean Ring Time", TTalk AS "Talk Time Total", ATalk as "Mean Talk Time", PctOfCalls as "% of Calls Total"\
| sort + Agent

[Agent Logins Summary]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.show = 0
display.visualizations.type = custom
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:agent_logins"\
| eval Agent = ag_fname + " " + ag_lname + " ("+ag_num+")"\
\
\
| join q_num [search `default_index` sourcetype="3cx:queuecalls_view"\
| dedup q_name\
| table q_name, q_num]\
| eval qq = q_name+" ("+q_num+")"\
\
| stats values(q_num) as Qlist,\
        dc(logouttime) as logins,\
        avg(secondsloggedin) as AvgTLIn,\
        latest(logouttime) as lastactive,\
        sum(secondsloggedin) as TotTLIn values(qq) as Queues by Agent \
\
| eval ToLIn = tostring(TotTLIn,"duration") | rex field=ToLIn "(?<dayAndHours>.*)\:(?<mins>\d+)\:(?<secs>\d+)"\
| eval ToLIn = replace(dayAndHours,"\+","d ")+"h "+mins+"m "+secs+"s "\
| eval ToTLIn = tostring(AvgTLIn,"duration") | rex field=ToTLIn "(?<dayAndHours2>.*)\:(?<mins2>\d+)\:(?<secs2>\d+)"\
| eval ToTLIn = replace(dayAndHours2,"\+","d ")+"h "+mins2+"m "+secs2+"s "\
| eval lastactive = strftime(strptime(lastactive,"%Y-%m-%d %H:%M:%S%z"),"%a %I:%M %p %z, %b %d %Y")\
\
| table Agent, Queues, lastactive, logins, ToLIn, ToTLIn\
| join Agent [search `default_index` sourcetype="3cx:queuecalls_view" | eval Agent = ag_fname + " " + ag_lname + " ("+to_dn+")" | eval svc = if(isserviced=1,1,0) | stats sum(svc) as "Calls Serviced" by Agent ]\
| rename ToLIn as "Total Time Spent Logged In", ToTLIn as "Avg Time Spent Logged In", logins as "# of Logins", lastactive as "Last Time Active"

[Calls Summary for each Queue]
action.email.useNSSubject = 1
alert.track = 0
description = SLA default is 30 seconds.
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.statistics.totalsRow = 1
display.visualizations.charting.chart = line
display.visualizations.show = 0
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:queuecalls_view"\
| eval Queue = q_num+" - "+q_name\
| eval Ab = if(isserviced="0", 1, 0)\
| eval Ans = if(isserviced="1", 1, 0)\
| eval SlaP = if(tot_ringing_sec<=$slatime$,1,0)\
| stats count as Total, \
sum(Ab) as Abandoned, \
sum(Ans) as Answered,\
sum(tot_servicing_sec) as TotTalk,\
avg(tot_servicing_sec) as AvgTalk,\
sum(tot_ringing_sec) as TotRing,\
avg(tot_ringing_sec) as AvgRing,\
sum(SlaP) as SlaPc by Queue\
| eval TotC = [search `default_index` sourcetype="3cx:queuecalls_view" | stats count as TotalC | return $TotalC ]\
| eval PctOfCalls = round((Total/TotC)*100,2) . " %"\
| eval PctOfSLA = round((SlaPc/Total)*100,2) . " %"\
| eval SvPct = round(Answered*100/Total,1) . " %"\
| eval TTalk = replace(tostring(TotTalk,"duration"),"\.(\d+)","")\
| eval TRing = replace(tostring(TotRing,"duration"),"\.(\d+)","")\
| eval TTalk = replace(TTalk,"(\d*)\+(\d+)\:(\d+)\:(\d+)","\1d \2h \3m \4s")\
| eval TRing = replace(TRing,"(\d*)\+(\d+)\:(\d+)\:(\d+)","\1d \2h \3m \4s")\
| eval TTalk = replace(TTalk,"(\d+)\:(\d+)\:(\d+)","\1h \2m \3s")\
| eval TRing = replace(TRing,"(\d+)\:(\d+)\:(\d+)","\1h \2m \3s")\
| eval ATalk = strftime(AvgTalk, "%Mm %Ss")\
| eval ARing = strftime(AvgRing, "%Mm %Ss")\
| table Queue, Total, Abandoned, Answered, PctOfCalls, SvPct, PctOfSLA, TRing, ARing, TTalk, ATalk\
| rename Total as "Total Calls", SvPct as "% of Calls Serviced", PctOfSLA as "SLA Met %", TRing AS "Ring Time Total", ARing as "Mean Ring Time", TTalk AS "Talk Time Total", ATalk as "Mean Talk Time", PctOfCalls as "% of Calls Total"\
| sort + q_num

[Agent Logins Call Summary]
action.email = 1
action.email.sendpdf = 1
action.email.sendresults = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 0 10 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","talking_dur","q_num","time_start","true_time_start","Ext","to_dn","ag_fname","call_history_id","ringing_dur","recording_url"]
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = pie
display.visualizations.custom.type = timeline_app.timeline
display.visualizations.show = 0
request.ui_dispatch_app = crossrealms_3cx
request.ui_dispatch_view = search
search = `default_index` sourcetype="3cx:agent_logins"\
| eval Agent = ag_fname + " " + ag_lname + " ("+ag_num+")"\
| eval lgnTime = strftime(strptime(logintime,"%Y-%m-%d %H:%M:%S%z"),"%Y-%m-%d %H:%M %z")\
| eval lgoTime = strftime(strptime(logouttime,"%Y-%m-%d %H:%M:%S%z"),"%Y-%m-%d %H:%M %z")\
| eval ToTLIn = tostring(secondsloggedin,"duration") | rex field=ToTLIn "(?<dayAndHours2>.*)\:(?<mins2>\d+)\:(?<secs2>\d+)"\
| eval ToTLIn = replace(dayAndHours2,"\+","d ")+"h "+mins2+"m "+secs2+"s "\
| dedup lgoTime, Agent\
| join Agent max=0 [search \
`default_index` sourcetype="3cx:queuecalls_view"\
| eval Agent = ag_fname + " " + ag_lname + " ("+to_dn+")"\
| eval time_start1 = strftime(strptime(time_start,"%Y-%m-%d %H:%M:%S%z"),"%Y-%m-%d %H:%M %z")\
| eval unans = if(isserviced=0,1,0) | eval ans = if(isserviced=1,1,0) | eval tot = 1 | eval slab = if(tot_ringing_sec<30,1,0)\
| where !isnull(Agent)] \
| where time_start1<lgoTime AND time_start1>lgnTime\
| eval qq = q_name+" ("+q_num+")"\
| stats values(qq) as Qlist, sum(unans) as missed, sum(ans) as answered, sum(tot) as ttl, avg(tot_ringing_sec) as avgr, sum(slab) as slb by lgnTime, lgoTime, Agent, ToTLIn\
| eval avgr = strftime(avgr, "%Mm %Ss")\
| eval SLA = round((slb/ttl)*100,2) . " %"\
| table lgnTime, lgoTime, Agent, Qlist, ToTLIn, answered, missed, avgr, SLA\
| rename lgnTime as "Login Time", lgoTime as "Logout Time", ToTLIn as "Time Logged In", answered as "Calls Answered", missed as "Calls Missed", avgr as "Avg Ringtime", SLA as "SLA Met", Qlist as "Queues"\
| sort - "Logout Time"
